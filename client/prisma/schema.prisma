// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?         @default("default.png")
  accounts      Account[]
  password      String?
  byUser        FriendRequest[] @relation("by")
  forUser       FriendRequest[] @relation("for")
  user          Friend[]        @relation("user")
  friend        Friend[]        @relation("friend")

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model FriendRequest {
  id   String   @id @default(uuid())
  by   String
  for  String
  date DateTime

  byUser  User @relation("by", fields: [by], references: [id], onDelete: Cascade, onUpdate: Cascade)
  forUser User @relation("for", fields: [for], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([id])
}

model Friend {
  id       String @id @default(uuid())
  userId   String
  friendId String

  user   User @relation("user", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  friend User @relation("friend", fields: [friendId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([id])
}
